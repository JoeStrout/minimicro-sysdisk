Programmers are the witches and wizards of the modern world.
Remember to use `==` to compare values, and `=` to assign a new value.
Use `val(s)` to convert a string to a number.
Use `str(n)` to convert a number, list, or map to a string.
MiniScript has two ways of looping: `for` and `while`.
You can always `break` out of a loop if you like.
MiniScript has four basic types: numbers, strings, lists, and maps.
Sometimes truth is a little fuzzy.
You can use `*` with strings and lists to make things repeat.
You can use `+` with any data type.
You can use `-` to lop off the end of a string.
Strings, lists, and maps are considered `true` if they are nonempty.
Numbers are considered true if they are not zero.
Use parentheses only when you really need them.
`round(x, 2)` rounds x to 2 decimal places.
`rnd` returns a random number between 0 and 1.
`m[rnd * m.len]` gets a random element from list `m`.
Join the community at `http://miniscript.org`!
"Everybody should learn how to program a computer... because it\nteaches you how to think." -- Steve Jobs
Use the `view` command to preview any file.
Use `@` to check the parameters of a function, e.g.: `@gfx.drawPoly`
Stuck at a `...]` prompt?  Press `Control-C`!
Press `Control-C` to break out of a running program.
Use the `pprint` command to "pretty print" a list or map.
Use the `findFile` command to easily get the path to any file.
Both `run` and `edit` can work alone on the current program, or\nyou can add a path to a file.
Too lazy to type a program path?  Try `run findFile`!
Use the `demos` command to easily browse and run a subset of demos,\nor even auto-run them for an "attract" mode!
Prefer a GUI?  Try the `desktop` command!
For a 24th-century experience, try the `lcars` command.
When standard commands like `cd` appear broken, try the `wtf` command.